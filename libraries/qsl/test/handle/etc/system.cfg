export = libPath, dllPath, logDest, logPath, logRotate, logLevel, eventPath
#---------------------------------- paths ------------------------------------#
etcPath = ${EC_SYS_PATH}/bin/ec/libraries/qsl/test/handle/etc/
binPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}
libPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/
dllPath = ${EC_SYS_PATH}/bin/ec/components/${EC_COMPONENT_PKG}, ${EC_SYS_PATH}/bin/ec/libraries/
dataPath = ${EC_SYS_PATH}/data/test/qslHandleTest/${EC_COMPONENT_ID}
logPath = ${EC_SYS_PATH}/log/test/qslHandleTest/${EC_COMPONENT_ID}
eventPath = ${EC_SYS_PATH}/data/test/qslHandleTest/shared/events/
#---------------------------------- process ----------------------------------#
basePort = 18000
startWait = 1
stopWait = 1
cpuAffinity = 0
#---------------------------------- logging ----------------------------------#
logLevel = INFO
logDest = FILE,STDERR
logRotate = 01:00:00
#---------------------------------- housekeeping -----------------------------#
housekeeping = ()
#---------------------------------- components -------------------------------#
[group:t]
  [[t.run]]
    command = "q qtestRunner.q"
    type = q:qtest/qtestRunner
    port = ${basePort}
    memCap = 10000
    testFiles = ${EC_SYS_PATH}/bin/ec/libraries/qsl/test/handle/handle_functionalTests.q
    testNamespaces = .testHandle

# Test environment for qsl/handle test
[group:t0]
  [[t0.proc1]]
    binPath = ${EC_SYS_PATH}/bin/ec/libraries/qsl/test/handle/
    command = "q gen_proc.q"
    type = q:process/process
    port = ${basePort} + 1
    memCap = 10000

  [[t0.proc2]]
    binPath = ${EC_SYS_PATH}/bin/ec/libraries/qsl/test/handle/
    command = "q gen_proc.q"
    type = q:process/process
    port = ${basePort} + 2
    memCap = 10000
    
  [[t0.proc3]]
    binPath = ${EC_SYS_PATH}/bin/ec/libraries/qsl/test/handle/
    command = "q gen_proc.q"
    type = q:process/process
    port = ${basePort} + 3
    memCap = 10000
  
  # processes for testing .hnd.dh 
  
  [[mock.backend1:2]]                # process returning queries with instance numbers 
    binPath = ${EC_SYS_PATH}/bin/ec/components/mserve/test/
    command = "q mockBackend.q"       
    type = q:mock/mockBackend         
    port = ${basePort} + 10  + ${EC_COMPONENT_INSTANCE} # General config field    - port 
    memCap = 1000            # General config field    - q process memory cap in MB (-w q option)

  [[t.mserve1]]
    command = "q mserve.q"
    type = q:mserve/mserve
    port = ${basePort} + 20
    memCap = 10000
    cfg.dataSource = mock.backend1
    
  [[mock.backend2:2]]                # process returning queries with instance numbers 
    binPath = ${EC_SYS_PATH}/bin/ec/components/mserve/test/
    command = "q mockBackend.q"       
    type = q:mock/mockBackend         
    port = ${basePort} + 30  + ${EC_COMPONENT_INSTANCE} # General config field
    memCap = 1000 

  [[t.mserve2]]
    command = "q mserve.q"
    type = q:mserve/mserve
    port = ${basePort} + 40
    memCap = 10000
    cfg.dataSource = mock.backend2

  [[t.client]]
    binPath = ${EC_SYS_PATH}/bin/ec/libraries/qsl/test/handle
    command = "q mserve_client.q"
    type = q:mock/mockClient
    port = ${basePort} + 41

